#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>


#define LED 2                         //výstupní LED (integrovaná)
#define TOUTCH_PIN T0                 // dotykový pin
#define analog 35                     //Analogový vstup Pot.


int touch_value = 100;
int analog_value=0;



// inicializace modulu z knihovny
BLECharacteristic *pCharacteristic;
// proměnná pro kontrolu připojených zařízení
bool dev_connected = false;
// proměnná pro ukládání přijaté zprávy
std::string prijataZprava;
std::string inp_string = "0";


//UUID
#define SERVICE_UUID           "6E400001-B5A3-F393-E0A9-E50E24DCCA9E"
#define CHARACTERISTIC_UUID_RX "6E400002-B5A3-F393-E0A9-E50E24DCCA9E"
#define CHARACTERISTIC_UUID_TX "6E400003-B5A3-F393-E0A9-E50E24DCCA9E"

void BLEsend(String zprava);

// třída pro kontrolu připojení
class MyServerCallbacks: public BLEServerCallbacks 
{
    // při spojení zařízení nastav proměnnou na log1
    void onConnect(BLEServer* pServer) 
    {
      dev_connected = true;
      Serial.println("CLIENT connected");
    };
    // při odpojení zařízení nastav proměnnou na log0
    void onDisconnect(BLEServer* pServer) {
      dev_connected = false;
      Serial.println("CLIENT disconnected");

    }
};

// třída pro příjem zprávy
class MyCallbacks: public BLECharacteristicCallbacks {
    // při příjmu zprávy proveď následující
    void onWrite(BLECharacteristic *pCharacteristic) {
      // načti přijatou zprávu do proměnné
      prijataZprava = pCharacteristic->getValue();
      inp_string = prijataZprava;
      // pokud není zpráva prázdná, vypiš její obsah
      // po znacích po sériové lince
      if (prijataZprava.length() > 0) {
        Serial.print("Recieved : ");
        for (int i = 0; i < prijataZprava.length(); i++) {
          Serial.print(prijataZprava[i]);
        }
      }
    }
};
void setup() {
  Serial.begin(115200);

  pinMode(LED, OUTPUT);
  pinMode(analog,INPUT);

  // inicializace Bluetooth s nastavením jména zařízení
  BLEDevice::init("ESP32 BLE");
  // vytvoření BLE serveru
  BLEServer *pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  // vytvoření BLE služby
  BLEService *pService = pServer->createService(SERVICE_UUID);
  // vytvoření BLE komunikačního kanálu pro odesílání (TX)
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID_TX,
                      BLECharacteristic::PROPERTY_NOTIFY
                    );
  pCharacteristic->addDescriptor(new BLE2902());
  // vytvoření BLE komunikačního kanálu pro příjem (RX)
  BLECharacteristic *pCharacteristic = pService->createCharacteristic(
                                         CHARACTERISTIC_UUID_RX,
                                         BLECharacteristic::PROPERTY_WRITE
                                       );
  pCharacteristic->setCallbacks(new MyCallbacks());
  // zahájení BLE služby
  pService->start();
  // zapnutí viditelnosti BLE
  pServer->getAdvertising()->start();
  Serial.println("BLE nastaveno, ceka na pripojeni..");
}


void loop() {
  Serial.println(BLEAddress);
  analog_value= analogRead(analog);
  if (dev_connected == true) {

    if(inp_string.find("A")!= -1)
      {
        String zprava = "TOUCH SENSE";
        touch_value = touchRead(TOUTCH_PIN);
        zprava += touch_value;
        zprava += "\n";
        BLEsend(zprava);
      }
     if(inp_string.find("B")!= -1)
      {
        String zprava = "ANALOG READ ";
        zprava += analog_value;
        zprava += "\n";
        BLEsend(zprava);
      }
     if(inp_string.find("C")!= -1)
      {
        String zprava = "Read C";
        zprava += "\n";
        BLEsend(zprava);
      }
      if (inp_string.find("D") != -1) 
      {
        String zprava = "LED ON";
        zprava += "\n";
        BLEsend(zprava);
        Serial.println(zprava);
        digitalWrite(LED, HIGH);
      }
      else 
        if (inp_string.find("E") != -1) 
        {
          String zprava = "LED OFF";
          zprava += "\n";
          BLEsend(zprava);
          Serial.println(zprava);
          digitalWrite(LED, LOW);
        }   
  }
  inp_string = "0";
  // pause
  delay(100);
}

void BLEsend(String zprava)
{
           char zpravaChar[zprava.length() + 1];
        zprava.toCharArray(zpravaChar, zprava.length() + 1);
         // přepsání zprávy do BLE služby
         pCharacteristic->setValue(zpravaChar);
        // odeslání zprávy skrze BLE do připojeného zařízení
        pCharacteristic->notify();
}
